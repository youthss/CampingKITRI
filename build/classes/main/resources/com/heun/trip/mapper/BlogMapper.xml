<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.heun.trip.dao.BlogDao">
   
  <resultMap type="blog" id="blogMap">
    <id column="board_id" property="no"/>
    <result column="title" property="title"/>
    <result column="conts" property="content"/>
    <result column="main_photo" property="mainPhoto" />
    <result column="cdt" property="createdDate"/>
     
    <result column="usr_id" property="userNo"/>
    <result column="name" property="name"/>
    
    <result column="rms_id" property="rmsNo"/>
    <result column="grd" property="grade"/>
    <result column="rm_name" property="rmsName"/>
    <result column="addr" property="rmsAddr"/>
    <result column="dtil_addr" property="rmsDetailAddr"/>
    
    <result column="blike_check" property="blike"/>
  </resultMap>
  
  <resultMap type="blog" id="blogPhotoMap">
    <id column="board_id" property="no"/>
    <result column="title" property="title"/>
    <result column="conts" property="content"/>
    <result column="main_photo" property="mainPhoto" />
    <result column="cdt" property="createdDate"/>
    <result column="usr_id" property="userNo"/>
    <result column="name" property="name"/>
    <result column="rms_id" property="rmsNo"/>
    <result column="grd" property="grade"/>
    <result column="rm_name" property="rmsName"/>
    <result column="addr" property="rmsAddr"/>
    <result column="dtil_addr" property="rmsDetailAddr"/>
    <result column="blike_check" property="blike"/>
    
    <collection property="photoFiles" ofType="blogFile"> 
      <id column="pboard_id" property="no"/>
      <result column="board_id"  property="blogNo"/>
      <result column="photo" property="file"/>
    </collection>
  </resultMap>
  
  <resultMap type="roomcheckout" id="roomcheckoutMap">
    <id column="rms_id" property="rmsNo"/>
    <result column="rm_name" property="rmsName"/>
  </resultMap>

  <resultMap type="blike" id="blikeMap">
    <id column="blike_no" property="blikeNo"/>
    <result column="blike_check" property="blikeCheck"/>
    <result column="board_id" property="boardNo"/>
    <result column="usr_id" property="userNo"/>
  </resultMap>

  

  <select id="findAll" resultMap="blogMap" parameterType="map">
    select
      b.board_id,
      b.title,
      b.conts,
      b.cdt,
      b.main_photo,
      u.usr_id,
      u.name,
      r.rms_id,
      r.grd,
      r.rm_name,
      r.addr
    from
      board b
    left outer join
      usr u on b.usr_id=u.usr_id
    left outer join
      rms r on b.rms_id=r.rms_id
    order by
      board_id desc
    <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if> 
  </select>
  
  <select id="findAllIndex" resultMap="blogMap">
    select
      b.board_id,
      b.title,
      b.conts,
      b.cdt,
      b.main_photo,
      u.usr_id,
      u.name,
      r.rms_id,
      r.grd,
      r.rm_name,
      r.addr
    from
      board b
    left outer join
      usr u on b.usr_id=u.usr_id
    left outer join
      rms r on b.rms_id=r.rms_id
    order by
      rand()

  </select>
  
  <insert id="insert" parameterType="blog" useGeneratedKeys="true" keyColumn="board_id" keyProperty="no">
    insert into board(
      title,
      conts,
      usr_id,
      rms_id,
      main_photo)
      
    values(
      #{title},
      #{content},
      #{userNo},
      #{rmsNo},
      #{mainPhoto})
  </insert>
  
  
  <select id="findByNo" resultMap="blogPhotoMap" parameterType="int">
    select
      b.board_id,
      b.title,
      b.conts,
      b.cdt,
      b.main_photo,
      u.usr_id,
      u.name,
      r.rms_id,
      r.grd,
      r.rm_name,
      r.addr,
      r.dtil_addr,
      p.photo
    from
      board b
    left outer join
      usr u on b.usr_id=u.usr_id
    left outer join
      rms r on b.rms_id=r.rms_id
    left outer join
      photoboard p on b.board_id=p.board_id
    where
      b.board_id = #{no}
    order by
      b.board_id desc
  </select>
  
  <update id="update" parameterType="blog">
    update
      board
    set
      title = #{title},
      conts = #{content},
      main_photo = #{mainPhoto}
    where 
      board_id = #{no}
  </update>
  
  <delete id="delete" parameterType="int">
    delete 
      from board 
    where 
      board_id = #{no} 
  </delete>
  
  <delete id="deletelike" parameterType="int">
    delete 
      from blike
    where 
      board_id = #{no} 
  </delete>
  
  <select id="countAll" resultType="int">
    select count(*) from board
  </select>
  
  <select id="checkRev" resultType="int" parameterType="int">
    select 
      count(*)
    from 
      rev r
    left outer join 
      usr u 
        on r.usr_id=u.usr_id
    where
      r.usr_id =#{no} and r.stus_id=3;
  </select>
  
  <select id="roomCheckOut" resultMap="roomcheckoutMap" parameterType="int">
    select
      r.rms_id,
      r.rm_name
    from
      rev v
    left outer join
      usr u on v.usr_id = u.usr_id
    left outer join
      rms r on v.rms_id = r.rms_id
    where
      v.usr_id = #{no} and v.stus_id = 3;
  </select>

  <select id="checkView" resultType="int" parameterType="map">
   select 
    count(*) 
   from 
    blike 
   where 
    board_id=#{boardNo} and usr_id=#{userNo}
  </select>
  
  <select id="checkLike" resultType="int" parameterType="map">
    select
      blike_check
    from
      blike
    where
      board_id = #{boardNo} and usr_id = #{userNo}
  </select>
  
  <update id="increaseLike" parameterType="map">
    update
      blike
    set
      blike_check = blike_check + 1
    where
      board_id = #{boardNo} and usr_id = #{userNo}  
  </update>
  
  <update id="decreaseLike" parameterType="map">
    update
      blike
    set
      blike_check = blike_check - 1
    where
      board_id = #{boardNo} and usr_id = #{userNo}  
  </update>
  
  <insert id="createLike" parameterType="blike">
   insert into blike 
    (board_id, usr_id)
   values
     (#{boardNo}, #{userNo});
  </insert>

  <select id="countLike" resultType="int" parameterType="int">
    select 
      count(blike_check) 
    from 
      board b 
    left outer join 
      blike l on l.board_id = b.board_id 
    where 
      l.blike_check = 1 and b.board_id = #{boardNo}
  </select>
  
  <select id="likebylist" resultMap="blogMap" parameterType="map">
   select DISTINCT
      b.board_id,
      b.title,
      b.conts,
      b.cdt,
      b.main_photo,
      u.usr_id,
      u.name,
      r.rms_id,
      r.grd,
      r.rm_name,
      r.addr,
      l.blike_check
    from
      board b
    left outer join
      usr u on b.usr_id=u.usr_id
    left outer join 
      rms r on b.rms_id=r.rms_id
    left outer join
     blike l on l.board_id=b.board_id
    GROUP BY b.board_id
    order by
      l.blike_check desc
        <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if> 
  </select>
  
  <select id="orderbylist" resultMap="blogMap" parameterType="map">
    select
      b.board_id,
      b.title,
      b.conts,
      b.cdt,
      b.main_photo,
      u.usr_id,
      u.name,
      r.rms_id,
      r.grd,
      r.rm_name,
      r.addr
    from
      board b
    left outer join
      usr u on b.usr_id=u.usr_id
    left outer join
      rms r on b.rms_id=r.rms_id
    order by
      b.board_id desc
        <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if> 
  </select>
  
  <select id="deorderbylist" resultMap="blogMap" parameterType="map">
    select
      b.board_id,
      b.title,
      b.conts,
      b.cdt, 
      b.main_photo,
      u.usr_id,
      u.name,
      r.rms_id,
      r.grd,
      r.rm_name,
      r.addr
    from
      board b
    left outer join
      usr u on b.usr_id=u.usr_id
    left outer join
      rms r on b.rms_id=r.rms_id
    order by
      b.board_id asc
        <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if> 
  </select>
  
</mapper>  

