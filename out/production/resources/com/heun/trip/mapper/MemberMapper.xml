<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.heun.trip.dao.MemberDao">
  
  <resultMap type="member" id="memberMap">
    <id column="usr_id"  property="no"/>
    <result column="email"   property="email"/>
    <result column="pwd"  property="password"/>
    <result column="auth"    property="auth"/>
    <result column="auth_id"    property="authNo"/>
    <result column="name"    property="name"/>
    <result column="tel"    property="tel"/>
    <result column="sns_no"    property="sns_no"/>
    <result column="usr_photo"  property="photo"/>
    <result column="cdt"  property="createdDate"/>
    <result column="bank"    property="bank"/>
    <result column="bank_id"    property="bnk_no"/>
  </resultMap>
  
  
  

  
  <select id="findByNo" resultMap="memberMap" parameterType="int">
    select
      usr_id,
      email,
      name,
      tel,
      auth,
      cdt,
      usr_photo
    from 
      usr u
    left outer join
      auth a
    on
      u.auth_id=a.auth_id
    where 
      usr_id = #{value}
  </select>
  
   <insert id="insert" parameterType="member"
      useGeneratedKeys="true" keyColumn="usr_id" keyProperty="no">
    insert into usr(
      email,
      name,
      pwd,
      tel,
      sns_no,
      usr_photo,
      auth_id)
      
    values(
      #{email},
      #{name},
      password(#{password}),
      #{tel},
      #{sns_no},
      #{photo},
      #{auth})
  </insert>
  
     <insert id="bankinsert" parameterType="map">
    insert into host(
    usr_id,
    bank,
    bank_id)      
    values(
      #{no},
      #{bank},
      #{bnkno})
  </insert>
  
  
  
   <insert id="snsinsert" parameterType="member" useGeneratedKeys="true" keyColumn="member_id" keyProperty="no">
    insert into usr(
      email,
      name,
      pwd,
      tel,
      sns_no,
      usr_photo,
      auth_id)
      
    values(
      #{email},
      #{name},
      password(#{password}),
      #{tel},
      #{sns_no},
      #{photo},
      #{auth})
  </insert>
  
     <insert id="fbinsert" parameterType="member" useGeneratedKeys="true" keyColumn="member_id" keyProperty="no">
    insert into usr(
      email,
      name,
      pwd,
      tel,
      sns_no,
      usr_photo,
      auth_id)
      
    values(
      #{email},
      #{name},
      password(#{password}),
      #{tel},
      #{sns_no},
      #{photo},
      #{authNo})
  </insert>
  
  <update id="update" parameterType="map">
    update usr
    <set>
      <if test="name != null">name = #{name},</if>
      <if test="tel != null">tel = #{tel}</if>
    </set>  
    where 
      usr_id = #{no}
  </update>
  
  
  <update id="profileupdate" parameterType="map">
    update usr
    <set>
      <if test="name != null">name = #{name},</if>
      <if test="email != null">email = #{email},</if>
      <if test="password != null">pwd = password(#{password}),</if>
      <if test="tel != null">tel = #{tel},</if>
       <if test="auth != null">auth_id = #{auth},</if>
       <if test="photo != null">usr_photo = #{photo}</if>
    </set>  
    where 
      usr_id = #{no}
  </update>
  
  
  
  <update id="Emailupdate" parameterType="member">
    update usr
    <set>
      <if test="password != null">pwd = password(#{password})</if>
    </set>  
    where 
      email = #{email}
  </update>
  
   <delete id="delete" parameterType="int">
    delete from usr 
    where usr_id = #{value}
  </delete>
  
  <select id="findByEmailPassword" resultMap="memberMap" parameterType="map">
    select 
      u.usr_id,
      u.email,
      u.name,
      u.tel,
      a.auth,
      u.auth_id,
      u.usr_photo,
      u.cdt
    from 
      usr u
    left outer join
      auth a
    on
      u.auth_id=a.auth_id
    where 
      u.email = #{email}
      and u.pwd = password(#{password})
  </select>
  
  <select id="findByEmail" resultMap="memberMap" parameterType="string">
    select
    usr_id,
      email,
      name,
      tel,
      usr_photo,
      cdt,
      auth
    from
    usr u
    left outer join
      auth a
    on
      u.auth_id=a.auth_id
    where
    email = #{value}
   
  </select>
  <select id="findByEmailSns" resultMap="memberMap" parameterType="map">
    select 
      usr_id,
      email,
      name,
      tel,
      auth,
      usr_photo,
      cdt
    from 
      usr u
    left outer join
      auth a
    on
      u.auth_id=a.auth_id
    where 
      email = #{email}
      and sns_no = #{sns_no}
  </select>
  
   <select id="findByEmailName" resultMap="memberMap" parameterType="map">
    select 
      usr_id,
      email,
      name,
      tel,
      auth,
      usr_photo,
      cdt
    from 
      usr u
    left outer join
      auth a
    on
      u.auth_id=a.auth_id
    where 
      email = #{email}
      and name =#{name}
  </select>

  <select id="extractHostTel" parameterType="int" resultType="String">
    select tel from usr where usr_id = (select usr_id from rms where rms_id = #{no})
  </select>
  
  <select id="findByTel" resultType="int" parameterType="string">
    select
      count(*) 
    from
      usr
    where
      tel = #{value}
  </select>
  
 
 
 
 
 
 <select id="findAll" resultMap="memberMap" parameterType="map">
    select
      usr_id,
      email,
      name,
      tel,
      sns_no,
      auth,
      cdt
    from  
      usr u
    left outer join 
      auth a
    on
      u.auth_id=a.auth_id
    order by 
      usr_id desc
    <if test="#{size != null || rowNo != null}">
      limit #{rowNo}, #{size}
    </if>
  </select>
 
  <select id="namelist" resultMap="memberMap" parameterType="map">
    
    select
      u.usr_id,
      u.name,
      u.email,
      u.cdt,
      a.auth
     
    from
     usr u
      left outer join 
      auth a
      on
      u.auth_id=a.auth_id
    where
       u.name like CONCAT('%', #{val}, '%')
    order by 
      u.usr_id desc
      <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if>
  </select>
  
   <select id="emaillist" resultMap="memberMap" parameterType="map">
    
    select
      usr_id,
      name,
      email,
      cdt,
      auth
     
     from
     usr u
      left outer join 
      auth a
      on
      u.auth_id=a.auth_id
    where
       u.email like CONCAT('%', #{val}, '%')
    order by 
      u.usr_id desc
      <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if>
  </select>
  
   <select id="authlist" resultMap="memberMap" parameterType="map">
    
    select
      usr_id,
      name,
      email,
      cdt,
      auth
     
    from
     usr u
      left outer join 
      auth a
      on
      u.auth_id=a.auth_id
    where
       a.auth like CONCAT('%', #{val}, '%')
    order by 
      u.usr_id desc
      <if test="size != null and rowNo != null">
      limit #{rowNo}, #{size}
    </if>
  </select>
  
  
   
   
   

   
    <select id="countAll" resultType="int" >
      select count(*) from usr;
  </select>
   
   <select id="namecountAll" resultType="int" parameterType="map">
      select count(*) 
      from usr
        where name like CONCAT('%', #{val}, '%')  
  </select>
  
   <select id="emailcountAll" resultType="int" parameterType="map">
      select count(*) 
      from usr
        where email like CONCAT('%', #{val}, '%')  
  </select>
  
   <select id="authcountAll" resultType="int" parameterType="map">
      select count(*) 
       from
      usr u
       left outer join 
      auth a
      on
       u.auth_id=a.auth_id
      
        where a.auth like CONCAT('%', #{val}, '%')  
  </select>
  
  
  
</mapper>










